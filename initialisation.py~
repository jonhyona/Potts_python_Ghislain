import scipy.sparse as spsp
from scipy import stats
import numpy as np
import numpy.random as rd

from parameters import *

def hebbian_tensor(delta__ksi_i_mu__k):
    class CustomRandomState(np.random.RandomState):
        def randint(self, k):
            i = rd.randint(k)# def delta(i,j):
            return i - i % 2
    rs = CustomRandomState()
    rvs = stats.bernoulli(1).rvs
    
    mask = spsp.random(N, N, density=cm/N, random_state=rs, data_rvs=rvs)
    mask -= spsp.diags(mask.diagonal())
    mask.eliminate_zeros()
    
    J_i_j_k_l = np.dot((delta__ksi_i_mu__k-a/S), np.transpose(delta__ksi_i_mu__k-a/S))
    
    kronMask = spsp.kron(mask, np.ones((S,S)))
    
    J_i_j_k_l = kronMask.multiply(J_i_j_k_l)/(cm*a*(1-a/S))
    return J_i_j_k_l.tobsr(blocksize=(S,S))